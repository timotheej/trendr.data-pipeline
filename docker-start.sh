#!/bin/bash

# üê≥ Script de d√©marrage Docker pour Trendr
# Script super simple pour les d√©butants en Docker

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üê≥ TRENDR DOCKER SETUP${NC}"
echo "=================================="

# 1. V√©rification de Docker
echo -e "${YELLOW}üìã V√©rification de Docker...${NC}"

if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√© !${NC}"
    echo "Installer Docker Desktop depuis: https://www.docker.com/products/docker-desktop"
    exit 1
fi

# V√©rifier Docker Compose (nouvelle version ou ancienne)
DOCKER_COMPOSE_CMD="docker compose"
if ! docker compose version &> /dev/null; then
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker-compose"
    else
        echo -e "${RED}‚ùå Docker Compose n'est pas disponible !${NC}"
        echo "Docker Compose est g√©n√©ralement inclus avec Docker Desktop"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Docker est install√©${NC}"
docker --version
$DOCKER_COMPOSE_CMD version

# 2. V√©rification du fichier .env
echo -e "${YELLOW}üìã V√©rification de la configuration...${NC}"

if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier .env manquant, cr√©ation √† partir du template...${NC}"
    
    if [ -f ".env.example" ]; then
        cp .env.example .env
        echo -e "${YELLOW}üìù Fichier .env cr√©√©. VOUS DEVEZ LE CONFIGURER MAINTENANT !${NC}"
        echo ""
        echo -e "${RED}üõë √âTAPES OBLIGATOIRES :${NC}"
        echo "1. Ouvrir le fichier .env dans votre √©diteur"
        echo "2. Remplacer TOUTES les valeurs 'your-xxx-key' par vos vraies cl√©s API"
        echo "3. Sauvegarder le fichier"
        echo "4. Relancer ce script"
        echo ""
        echo -e "${BLUE}Fichier √† √©diter : $(pwd)/.env${NC}"
        exit 1
    else
        echo -e "${RED}‚ùå Fichier .env.example manquant !${NC}"
        exit 1
    fi
fi

# 3. V√©rification des cl√©s API dans .env
echo -e "${YELLOW}üîë V√©rification des cl√©s API...${NC}"

# Source le fichier .env
set -a
source .env
set +a

# V√©rification des variables critiques
missing_vars=()

if [[ -z "$SUPABASE_URL" || "$SUPABASE_URL" == "your-"* ]]; then
    missing_vars+=("SUPABASE_URL")
fi

if [[ -z "$SUPABASE_KEY" || "$SUPABASE_KEY" == "your-"* ]]; then
    missing_vars+=("SUPABASE_KEY")
fi

if [[ -z "$GOOGLE_PLACES_API_KEY" || "$GOOGLE_PLACES_API_KEY" == "your-"* ]]; then
    missing_vars+=("GOOGLE_PLACES_API_KEY")
fi

if [[ -z "$GOOGLE_CUSTOM_SEARCH_API_KEY" || "$GOOGLE_CUSTOM_SEARCH_API_KEY" == "your-"* ]]; then
    missing_vars+=("GOOGLE_CUSTOM_SEARCH_API_KEY")
fi

if [ ${#missing_vars[@]} -ne 0 ]; then
    echo -e "${RED}‚ùå Variables manquantes ou non configur√©es :${NC}"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo ""
    echo -e "${YELLOW}üìù √âditez le fichier .env et configurez ces variables${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Configuration OK${NC}"

# 4. Cr√©ation des r√©pertoires
echo -e "${YELLOW}üìÅ Cr√©ation des r√©pertoires...${NC}"
mkdir -p logs data/cache data/reports data/backups
echo -e "${GREEN}‚úÖ R√©pertoires cr√©√©s${NC}"

# 5. Fonction d'aide
show_help() {
    echo ""
    echo -e "${BLUE}üöÄ COMMANDES DISPONIBLES :${NC}"
    echo ""
    echo -e "${GREEN}# D√©marrer le syst√®me complet${NC}"
    echo "  $DOCKER_COMPOSE_CMD up -d"
    echo ""
    echo -e "${GREEN}# Voir les logs en temps r√©el${NC}"
    echo "  $DOCKER_COMPOSE_CMD logs -f"
    echo ""
    echo -e "${GREEN}# Voir le statut des services${NC}"
    echo "  $DOCKER_COMPOSE_CMD ps"
    echo ""
    echo -e "${GREEN}# Arr√™ter le syst√®me${NC}"
    echo "  $DOCKER_COMPOSE_CMD down"
    echo ""
    echo -e "${GREEN}# Lancer le pipeline manuellement (Paris)${NC}"
    echo "  $DOCKER_COMPOSE_CMD run --rm trendr-pipeline python3 run_pipeline.py --city Paris --mode full"
    echo ""
    echo -e "${GREEN}# Acc√©der √† l'API de monitoring${NC}"
    echo "  curl http://localhost:8080/health"
    echo "  curl http://localhost:8080/trending/Paris"
    echo ""
}

# 6. Menu interactif
echo ""
echo -e "${BLUE}üéØ QUE VOULEZ-VOUS FAIRE ?${NC}"
echo "1) D√©marrer le syst√®me complet"
echo "2) Voir l'aide avec toutes les commandes"
echo "3) Construire les images Docker (premi√®re fois)"
echo "4) Arr√™ter le syst√®me"
echo "5) Voir les logs"
echo "6) Lancer le pipeline manuellement"
echo "7) Quitter"

read -p "Votre choix (1-7): " choice

case $choice in
    1)
        echo -e "${YELLOW}üöÄ D√©marrage du syst√®me...${NC}"
        $DOCKER_COMPOSE_CMD up -d
        echo ""
        echo -e "${GREEN}‚úÖ Syst√®me d√©marr√© !${NC}"
        echo -e "${BLUE}üåê API disponible sur: http://localhost:8080${NC}"
        echo -e "${BLUE}üìã Status: $DOCKER_COMPOSE_CMD ps${NC}"
        echo -e "${BLUE}üìä Logs: $DOCKER_COMPOSE_CMD logs -f${NC}"
        ;;
    2)
        show_help
        ;;
    3)
        echo -e "${YELLOW}üî® Construction des images Docker...${NC}"
        $DOCKER_COMPOSE_CMD build --no-cache
        echo -e "${GREEN}‚úÖ Images construites !${NC}"
        ;;
    4)
        echo -e "${YELLOW}üõë Arr√™t du syst√®me...${NC}"
        $DOCKER_COMPOSE_CMD down
        echo -e "${GREEN}‚úÖ Syst√®me arr√™t√© !${NC}"
        ;;
    5)
        echo -e "${YELLOW}üìä Affichage des logs...${NC}"
        $DOCKER_COMPOSE_CMD logs -f
        ;;
    6)
        echo -e "${YELLOW}‚ñ∂Ô∏è  Lancement du pipeline Paris...${NC}"
        $DOCKER_COMPOSE_CMD run --rm trendr-pipeline python3 run_pipeline.py --city Paris --mode full
        ;;
    7)
        echo -e "${GREEN}üëã Au revoir !${NC}"
        exit 0
        ;;
    *)
        echo -e "${RED}‚ùå Choix invalide${NC}"
        show_help
        ;;
esac

echo ""
echo -e "${BLUE}üí° TIP: Relancez ce script √† tout moment avec: ./docker-start.sh${NC}"